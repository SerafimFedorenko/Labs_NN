# -*- coding: utf-8 -*-
"""Lab2_3_NN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HYbUuCKpuxxpBeaSvabkMjIdsfnB-T7g
"""

import numpy as np
import random
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score
from PIL import Image

from google.colab import drive
drive.mount('/content/drive')

plt.figure(figsize=(10,10))

def get_big_img(path):
  test_img = Image.open(path)
  test_img = test_img.resize((100, 100))
  plt.subplot(5,5,i)
  plt.imshow(test_img, cmap = "gray")
  test_img = test_img.convert('L')
  test_x = np.array(test_img, np.float32)
  test_x = test_x.reshape([-1, 10000])
  return test_x

def get_img(path):
  test_img = Image.open(path)
  test_img = test_img.resize((16, 16))
  plt.subplot(5,5,i)
  plt.imshow(test_img, cmap = "gray")
  test_img = test_img.convert('1')
  test_x = np.array(test_img, np.float32)
  test_x = test_x.reshape([-1, 256])
  return test_x

x_train = []
y_train = []
  
path = '/content/drive/My Drive/Google Colab/Грузовые/'
for i in range(1,11,1):
  x_train.append(get_img(path + str(i) +'.png')[0])
  y_train.append(1)

path = '/content/drive/My Drive/Google Colab/Легковые/'
for i in range(1,11,1):
  x_train.append(get_img(path + str(i) +'.png')[0])
  y_train.append(0)

print(x_train[0])

def step_func(x):
  if(x > 0):
    return 1
  else:
    return 0

class Neuron:
  def __init__(self, weightsCount, number = None):
    if number is None: 
      self.weights = []
      for i in range(weightsCount):
        self.weights.append(random.randint(-3, 3))
      self.bias = random.randint(-3, 3)
    else:
      self.weights = [] 
      for i in range(weightsCount):
        self.weights.append(number)
      self.bias = number

  def get_sum(self, x):
    sum = self.bias
    for i in range(len(self.weights)):
      sum += self.weights[i] * x[i]
    return sum

  def feed(self, x):
    y = step_func(self.get_sum(x))
    return y

  def print_params(self):
    n_str = ''
    for i in range(len(self.weights)):
      n_str += str(self.weights[i]) + " "
    print(n_str + str(self.bias))

  def change_weights(self, value, x):
    for i in range(len(self.weights)):
      if(x[i] == 1):
        self.weights[i] += value
    self.bias += value

class Network:
  def __init__(self, x_count):
    self.NeuronsL1 = []
    self.NeuronsL2 = []
    self.NeuronsL3 = Neuron(12)
    for i in range(25):
      n = Neuron(x_count)
      self.NeuronsL1.append(n)
    for i in range(12):
      n = Neuron(25)
      self.NeuronsL2.append(n)

  def predict(self, data):
    y_pred = []
    for x in data:
      res1 = []
      for n in self.NeuronsL1:
        res1.append(n.feed(x))
      res2 = []
      for n in self.NeuronsL2:
        res2.append(n.feed(res1))
      y_pred.append(self.NeuronsL3.feed(res2))
    return y_pred

  def trainHebb(self, data, y_trues, epochs):
    accs = []
    epoch_arr = []
    for epoch in range(epochs):
      for x, y_true in zip(data, y_trues):
        res1 = []
        for n in self.NeuronsL1:
          res1.append(n.feed(x))
        res2 = []
        for n in self.NeuronsL2:
          res2.append(n.feed(res1))
        out1 = self.NeuronsL3.feed(res2)
        value = 0.1
        if(out1 > y_true):
          for n in self.NeuronsL1:
            n.change_weights(-value, x)
          for n in self.NeuronsL2:
            n.change_weights(-value, res1)
          self.NeuronsL3.change_weights(-value, res2)
        elif(out1 < y_true):
          for n in self.NeuronsL1:
            n.change_weights(value, x)
          for n in self.NeuronsL2:
            n.change_weights(value, res1)
          self.NeuronsL3.change_weights(value, res2)
      y_preds = self.predict(data)
      acc = accuracy_score(y_trues, y_preds)
      accs.append(acc)
      epoch_arr.append(epoch)
      if epoch % 10 == 1 or acc > 0.98:
        print("Epoch %d acc: %.3f" % (epoch, acc))
      if acc > 0.98:
        break
    return epoch_arr, accs

network = Network(256)

epochs, accuracies = network.trainHebb(x_train, y_train, 200)

x_test_full = []
x_test = []
y_test = []
path = '/content/drive/My Drive/Google Colab/Тест_Авто/Легковые/'
for i in range(1,6,1):
  x_test_full.append(get_big_img(path + str(i) +'.png')[0])
  x_test.append(get_img(path + str(i) +'.png')[0])
  y_test.append(0)

path = '/content/drive/My Drive/Google Colab/Тест_Авто/Грузовые/'
for i in range(1,6,1):
  x_test_full.append(get_big_img(path + str(i) +'.png')[0])
  x_test.append(get_img(path + str(i) +'.png')[0])
  y_test.append(1)

y_pred = network.predict(x_test)
acc = accuracy_score(y_test, y_pred)
print("acc:" + str(acc))
ress = ['Легковой', 'Грузовой']
plt.figure(figsize=(20,5))
for i in range(10):
  plt.subplot(1, 10, i + 1)
  plt.title(ress[y_pred[i]])
  img = np.reshape((x_test_full[i]), [100, 100])
  plt.imshow(img, cmap="gray")

plt.plot(epochs, accuracies)
plt.show()